// Code generated by MockGen. DO NOT EDIT.
// Source: task.go

// Package mock is a generated GoMock package.
package services

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	entities "workshops/rest-api/internal/entities"
)

// MockTaskQueryBuilder is a mock of TaskQueryBuilder interface.
type MockTaskQueryBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockTaskQueryBuilderMockRecorder
}

// MockTaskQueryBuilderMockRecorder is the mock recorder for MockTaskQueryBuilder.
type MockTaskQueryBuilderMockRecorder struct {
	mock *MockTaskQueryBuilder
}

// NewMockTaskQueryBuilder creates a new mock instance.
func NewMockTaskQueryBuilder(ctrl *gomock.Controller) *MockTaskQueryBuilder {
	mock := &MockTaskQueryBuilder{ctrl: ctrl}
	mock.recorder = &MockTaskQueryBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskQueryBuilder) EXPECT() *MockTaskQueryBuilderMockRecorder {
	return m.recorder
}

// BuildCategoryQuery mocks base method.
func (m *MockTaskQueryBuilder) BuildCategoryQuery(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCategoryQuery", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildCategoryQuery indicates an expected call of BuildCategoryQuery.
func (mr *MockTaskQueryBuilderMockRecorder) BuildCategoryQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCategoryQuery", reflect.TypeOf((*MockTaskQueryBuilder)(nil).BuildCategoryQuery), arg0)
}

// BuildOrderQuery mocks base method.
func (m *MockTaskQueryBuilder) BuildOrderQuery(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildOrderQuery", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildOrderQuery indicates an expected call of BuildOrderQuery.
func (mr *MockTaskQueryBuilderMockRecorder) BuildOrderQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildOrderQuery", reflect.TypeOf((*MockTaskQueryBuilder)(nil).BuildOrderQuery), arg0)
}

// BuildPeriodQuery mocks base method.
func (m *MockTaskQueryBuilder) BuildPeriodQuery(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPeriodQuery", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildPeriodQuery indicates an expected call of BuildPeriodQuery.
func (mr *MockTaskQueryBuilderMockRecorder) BuildPeriodQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPeriodQuery", reflect.TypeOf((*MockTaskQueryBuilder)(nil).BuildPeriodQuery), arg0)
}

// QueryArg mocks base method.
func (m *MockTaskQueryBuilder) QueryArg() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryArg")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// QueryArg indicates an expected call of QueryArg.
func (mr *MockTaskQueryBuilderMockRecorder) QueryArg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryArg", reflect.TypeOf((*MockTaskQueryBuilder)(nil).QueryArg))
}

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTaskRepository) Delete(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), ctx, id)
}

// Fetch mocks base method.
func (m *MockTaskRepository) Fetch(ctx context.Context, filters TaskQueryBuilder) (entities.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, filters)
	ret0, _ := ret[0].(entities.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockTaskRepositoryMockRecorder) Fetch(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockTaskRepository)(nil).Fetch), ctx, filters)
}

// Get mocks base method.
func (m *MockTaskRepository) Get(ctx context.Context, id int) (*entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskRepository)(nil).Get), ctx, id)
}

// Store mocks base method.
func (m *MockTaskRepository) Store(ctx context.Context, task *entities.Task) (*entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, task)
	ret0, _ := ret[0].(*entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockTaskRepositoryMockRecorder) Store(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTaskRepository)(nil).Store), ctx, task)
}

// Update mocks base method.
func (m *MockTaskRepository) Update(ctx context.Context, id int, task *entities.Task) (*entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, task)
	ret0, _ := ret[0].(*entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryMockRecorder) Update(ctx, id, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), ctx, id, task)
}
